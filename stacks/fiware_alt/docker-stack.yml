version: '3.5'

services:
  mongo-db:
    image: mongo:4.0 # Check https://docs.mongodb.com/manual/release-notes/
    hostname: mongo-db
    # Because within the same network the containers
    # are connected port exposing is not required --> only for external access
    ports:
      - "27017:27017"
    networks:
      - fiware
    command: --bind_ip_all --smallfiles --quiet
    volumes:
      - mongo-db:/data/db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 50m

  orion:
    # Sometimes the newest builds fail. Hence, we fixed a stable version that
    # probably will be updated once in a while
    image: fiware/orion:2.2.0
    hostname: orion
    depends_on:
      - mongo-db
    networks:
      - fiware
    ports:
      - "1026:1026"
    # Check carefully documentation for options:
    # https://fiware-orion.readthedocs.io/en/master/admin/cli/index.html
    # For in production mode please adjust these settings!
    command: 
      -dbhost mongo-db
      -logLevel ERROR
      -logForHumans
      -statCounters
      -statSemWait
      -statTiming
      -statNotifQueue 
      # Docker stack does not allow additional health check
      #heathcheck:
      #  test: curl --fail -s http://orion:1026/version || exit 1
      # Probably this placement is not necessary
    deploy:
      replicas: 5
      placement:
        constraints: [node.role == manager]
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 10m

  mongo-express:
    image: mongo-express:0.49 # Check https://docs.mongodb.com/manual/release-notes/
    hostname: mongo-express
    depends_on:
      - mongo-db
    # Because within the same network the containers
    # are connected port exposing is not required --> only for external access
    ports:
      - "8081:8081"
    networks:
      - fiware
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
      - ME_CONFIG_MONGODB_SERVER=mongo-db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 50m

  crate:
    image: crate:3.3 # Please check release notes!
    hostname: crate
    networks:
        - fiware
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    networks:
      - fiware
    command: crate -Clicense.enterprise=false -Cauth.host_based.enabled=false -Ccluster.name=fiwaredemo -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
    volumes:
      - crate:/data/db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  quantumleap:
    image: smartsdk/quantumleap:0.7.0
    hostname: quantumleap
    depends_on:
      - mongo-db
      - orion
      - crate
    # Docker stack does not allow additional health check
    # healthcheck:
    #  test: curl --fail -s http://quantumleap:8668/v2/version || exit 1
    networks:
      - fiware
    ports:
      - "8668:8668"
    environment:
      - CRATE_HOST=crate
      # - USE_GEOCODING=false
      # - REDIS_HOST=redis
      # - REDIS_PORT=6379
    deploy:
      replicas: 5
      placement:
        constraints: [node.role == manager]
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 10m

  grafana:
    image: grafana/grafana:6.2.2
    depends_on:
      - crate
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel,grafana-simple-json-datasource
    volumes:
      - grafana:/var/lib/grafana
      # - "./data:/var/lib/grafana"
    ports:
      - "3001:3000"
    networks:
      - fiware
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
        - fiware
    volumes:
      - /home/ubuntu/repos/hil_infrastructure_python/portainer4fiware/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      # - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      # - /home/ubuntu/repos/n5geh.tools.portainer/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  iot-agent-ul:
    image: fiware/iotagent-ul:1.9.0
    hostname: iot-agent-ul
    networks:
      - fiware
    depends_on:
      - mongo-db
      - mosquitto
    ports:
      - "4061:4061"
      - "7896:7896"
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=1026 # port the context broker listens on to update context
      - IOTA_NORTH_PORT=4061
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_PROVIDER_URL=http://iot-agent-ul:4061
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 50m

networks:
  fiware:
volumes:
  mongo-db:
  crate:
  grafana: